/*
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// EpicStats : A group of calculated values for this Epic.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct EpicStats {
    /// The total number of completed points in this Epic.
    #[serde(rename = "num_points_done")]
    pub num_points_done: i64,
    /// The total number of documents associated with this Epic.
    #[serde(rename = "num_related_documents")]
    pub num_related_documents: i64,
    /// The average cycle time (in seconds) of completed stories in this Epic.
    #[serde(rename = "average_cycle_time", skip_serializing_if = "Option::is_none")]
    pub average_cycle_time: Option<i64>,
    /// The total number of unstarted Stories in this Epic.
    #[serde(rename = "num_stories_unstarted")]
    pub num_stories_unstarted: i64,
    /// The total number of Stories in this Epic.
    #[serde(rename = "num_stories_total")]
    pub num_stories_total: i64,
    /// The date of the last update of a Story in this Epic.
    #[serde(rename = "last_story_update", deserialize_with = "Option::deserialize")]
    pub last_story_update: Option<String>,
    /// The total number of started points in this Epic.
    #[serde(rename = "num_points_started")]
    pub num_points_started: i64,
    /// The total number of unstarted points in this Epic.
    #[serde(rename = "num_points_unstarted")]
    pub num_points_unstarted: i64,
    /// The total number of started Stories in this Epic.
    #[serde(rename = "num_stories_started")]
    pub num_stories_started: i64,
    /// The total number of Stories with no point estimate.
    #[serde(rename = "num_stories_unestimated")]
    pub num_stories_unestimated: i64,
    /// The total number of backlog Stories in this Epic.
    #[serde(rename = "num_stories_backlog")]
    pub num_stories_backlog: i64,
    /// The average lead time (in seconds) of completed stories in this Epic.
    #[serde(rename = "average_lead_time", skip_serializing_if = "Option::is_none")]
    pub average_lead_time: Option<i64>,
    /// The total number of backlog points in this Epic.
    #[serde(rename = "num_points_backlog")]
    pub num_points_backlog: i64,
    /// The total number of points in this Epic.
    #[serde(rename = "num_points")]
    pub num_points: i64,
    /// The total number of done Stories in this Epic.
    #[serde(rename = "num_stories_done")]
    pub num_stories_done: i64,
}

impl EpicStats {
    /// A group of calculated values for this Epic.
    pub fn new(num_points_done: i64, num_related_documents: i64, num_stories_unstarted: i64, num_stories_total: i64, last_story_update: Option<String>, num_points_started: i64, num_points_unstarted: i64, num_stories_started: i64, num_stories_unestimated: i64, num_stories_backlog: i64, num_points_backlog: i64, num_points: i64, num_stories_done: i64) -> EpicStats {
        EpicStats {
            num_points_done,
            num_related_documents,
            average_cycle_time: None,
            num_stories_unstarted,
            num_stories_total,
            last_story_update,
            num_points_started,
            num_points_unstarted,
            num_stories_started,
            num_stories_unestimated,
            num_stories_backlog,
            average_lead_time: None,
            num_points_backlog,
            num_points,
            num_stories_done,
        }
    }
}


