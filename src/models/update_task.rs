/*
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct UpdateTask {
    /// The Task's description.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// An array of UUIDs of the owners of this story.
    #[serde(rename = "owner_ids", skip_serializing_if = "Option::is_none")]
    pub owner_ids: Option<Vec<uuid::Uuid>>,
    /// A true/false boolean indicating whether the task is complete.
    #[serde(rename = "complete", skip_serializing_if = "Option::is_none")]
    pub complete: Option<bool>,
    /// Move task before this task ID.
    #[serde(rename = "before_id", skip_serializing_if = "Option::is_none")]
    pub before_id: Option<i64>,
    /// Move task after this task ID.
    #[serde(rename = "after_id", skip_serializing_if = "Option::is_none")]
    pub after_id: Option<i64>,
}

impl UpdateTask {
    pub fn new() -> UpdateTask {
        UpdateTask {
            description: None,
            owner_ids: None,
            complete: None,
            before_id: None,
            after_id: None,
        }
    }
}


