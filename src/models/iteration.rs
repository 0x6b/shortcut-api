/*
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Iteration : An Iteration is a defined, time-boxed period of development for a collection of Stories. See https://help.shortcut.com/hc/en-us/articles/360028953452-Iterations-Overview for more information.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Iteration {
    /// The Shortcut application url for the Iteration.
    #[serde(rename = "app_url")]
    pub app_url: String,
    /// The description of the iteration.
    #[serde(rename = "description")]
    pub description: String,
    /// A string description of this resource
    #[serde(rename = "entity_type")]
    pub entity_type: String,
    /// An array of labels attached to the iteration.
    #[serde(rename = "labels")]
    pub labels: Vec<crate::models::Label>,
    /// Deprecated: use member_mention_ids.
    #[serde(rename = "mention_ids")]
    pub mention_ids: Vec<uuid::Uuid>,
    /// An array of Member IDs that have been mentioned in the Story description.
    #[serde(rename = "member_mention_ids")]
    pub member_mention_ids: Vec<uuid::Uuid>,
    /// An array containing Group IDs and Group-owned story counts for the Iteration's associated groups.
    #[serde(rename = "associated_groups")]
    pub associated_groups: Vec<crate::models::IterationAssociatedGroup>,
    /// The name of the iteration.
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "global_id")]
    pub global_id: String,
    /// An array of label ids attached to the iteration.
    #[serde(rename = "label_ids")]
    pub label_ids: Vec<i64>,
    /// The instant when this iteration was last updated.
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    /// An array of Group IDs that have been mentioned in the Story description.
    #[serde(rename = "group_mention_ids")]
    pub group_mention_ids: Vec<uuid::Uuid>,
    /// The date this iteration begins.
    #[serde(rename = "end_date")]
    pub end_date: String,
    /// An array of UUIDs for any Members listed as Followers.
    #[serde(rename = "follower_ids")]
    pub follower_ids: Vec<uuid::Uuid>,
    /// An array of UUIDs for any Groups you want to add as Followers. Currently, only one Group association is presented in our web UI.
    #[serde(rename = "group_ids")]
    pub group_ids: Vec<uuid::Uuid>,
    /// The date this iteration begins.
    #[serde(rename = "start_date")]
    pub start_date: String,
    /// The status of the iteration. Values are either \"unstarted\", \"started\", or \"done\".
    #[serde(rename = "status")]
    pub status: String,
    /// The ID of the iteration.
    #[serde(rename = "id")]
    pub id: i64,
    #[serde(rename = "stats")]
    pub stats: Box<crate::models::IterationStats>,
    /// The instant when this iteration was created.
    #[serde(rename = "created_at")]
    pub created_at: String,
}

impl Iteration {
    /// An Iteration is a defined, time-boxed period of development for a collection of Stories. See https://help.shortcut.com/hc/en-us/articles/360028953452-Iterations-Overview for more information.
    pub fn new(app_url: String, description: String, entity_type: String, labels: Vec<crate::models::Label>, mention_ids: Vec<uuid::Uuid>, member_mention_ids: Vec<uuid::Uuid>, associated_groups: Vec<crate::models::IterationAssociatedGroup>, name: String, global_id: String, label_ids: Vec<i64>, updated_at: String, group_mention_ids: Vec<uuid::Uuid>, end_date: String, follower_ids: Vec<uuid::Uuid>, group_ids: Vec<uuid::Uuid>, start_date: String, status: String, id: i64, stats: crate::models::IterationStats, created_at: String) -> Iteration {
        Iteration {
            app_url,
            description,
            entity_type,
            labels,
            mention_ids,
            member_mention_ids,
            associated_groups,
            name,
            global_id,
            label_ids,
            updated_at,
            group_mention_ids,
            end_date,
            follower_ids,
            group_ids,
            start_date,
            status,
            id,
            stats: Box::new(stats),
            created_at,
        }
    }
}


