/*
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct UpdateCustomFieldEnumValue {
    /// The unique ID of an existing EnumValue within the CustomField's domain.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<uuid::Uuid>,
    /// A string value within the domain of this Custom Field.
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// A color key associated with this EnumValue within the CustomField's domain.
    #[serde(rename = "color_key", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub color_key: Option<Option<String>>,
    /// Whether this EnumValue is enabled for its CustomField or not. Leaving this key out of the request leaves the current enabled state untouched.
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

impl UpdateCustomFieldEnumValue {
    pub fn new() -> UpdateCustomFieldEnumValue {
        UpdateCustomFieldEnumValue {
            id: None,
            value: None,
            color_key: None,
            enabled: None,
        }
    }
}


