/*
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Commit : Commit refers to a VCS commit and all associated details.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Commit {
    /// A string description of this resource.
    #[serde(rename = "entity_type")]
    pub entity_type: String,
    /// The ID of the Member that authored the Commit, if known.
    #[serde(rename = "author_id", deserialize_with = "Option::deserialize")]
    pub author_id: Option<uuid::Uuid>,
    /// The Commit hash.
    #[serde(rename = "hash")]
    pub hash: String,
    /// The time/date the Commit was updated.
    #[serde(rename = "updated_at", deserialize_with = "Option::deserialize")]
    pub updated_at: Option<String>,
    /// The unique ID of the Commit.
    #[serde(rename = "id", deserialize_with = "Option::deserialize")]
    pub id: Option<i64>,
    /// The URL of the Commit.
    #[serde(rename = "url")]
    pub url: String,
    /// The email address of the VCS user that authored the Commit.
    #[serde(rename = "author_email")]
    pub author_email: String,
    /// The time/date the Commit was pushed.
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    #[serde(rename = "author_identity")]
    pub author_identity: Box<crate::models::Identity>,
    /// The ID of the Repository that contains the Commit.
    #[serde(rename = "repository_id", deserialize_with = "Option::deserialize")]
    pub repository_id: Option<i64>,
    /// The time/date the Commit was created.
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// The Commit message.
    #[serde(rename = "message")]
    pub message: String,
}

impl Commit {
    /// Commit refers to a VCS commit and all associated details.
    pub fn new(entity_type: String, author_id: Option<uuid::Uuid>, hash: String, updated_at: Option<String>, id: Option<i64>, url: String, author_email: String, timestamp: String, author_identity: crate::models::Identity, repository_id: Option<i64>, created_at: String, message: String) -> Commit {
        Commit {
            entity_type,
            author_id,
            hash,
            updated_at,
            id,
            url,
            author_email,
            timestamp,
            author_identity: Box::new(author_identity),
            repository_id,
            created_at,
            message,
        }
    }
}


