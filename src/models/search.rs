/*
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Search {
    /// See our help center article on [search operators](https://help.shortcut.com/hc/en-us/articles/360000046646-Search-Operators)
    #[serde(rename = "query")]
    pub query: String,
    /// The number of search results to include in a page. Minimum of 1 and maximum of 25.
    #[serde(rename = "page_size", skip_serializing_if = "Option::is_none")]
    pub page_size: Option<i64>,
    /// The amount of detail included in each result item.    \"full\" will include all
    /// descriptions and comments and more fields on    related items such as pull requests,
    /// branches and tasks.    \"slim\" omits larger fulltext fields such as descriptions and
    /// comments    and only references related items by id.    The default is \"full\".
    #[serde(rename = "detail", skip_serializing_if = "Option::is_none")]
    pub detail: Option<Detail>,
    /// The next page token.
    #[serde(rename = "next", skip_serializing_if = "Option::is_none")]
    pub next: Option<String>,
    #[serde(rename = "include", skip_serializing_if = "Option::is_none")]
    pub include: Option<Include>,
    /// A collection of entity_types to search. Defaults to story and epic. Supports: epic,
    /// iteration, milestone, story.
    #[serde(rename = "entity_types", skip_serializing_if = "Option::is_none")]
    pub entity_types: Option<Vec<EntityTypes>>,
}

impl Search {
    pub fn new(query: String) -> Search {
        Search {
            query,
            page_size: None,
            detail: None,
            next: None,
            include: None,
            entity_types: None,
        }
    }
}

/// The amount of detail included in each result item.    \"full\" will include all descriptions and
/// comments and more fields on    related items such as pull requests, branches and tasks.
/// \"slim\" omits larger fulltext fields such as descriptions and comments    and only references
/// related items by id.    The default is \"full\".
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Detail {
    #[serde(rename = "full")]
    Full,
    #[serde(rename = "slim")]
    Slim,
}

impl Default for Detail {
    fn default() -> Detail {
        Self::Full
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Include {
    #[serde(rename = "cursors")]
    Cursors,
}

impl Default for Include {
    fn default() -> Include {
        Self::Cursors
    }
}
/// A collection of entity_types to search. Defaults to story and epic. Supports: epic, iteration,
/// milestone, story.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EntityTypes {
    #[serde(rename = "story")]
    Story,
    #[serde(rename = "milestone")]
    Milestone,
    #[serde(rename = "epic")]
    Epic,
    #[serde(rename = "iteration")]
    Iteration,
}

impl Default for EntityTypes {
    fn default() -> EntityTypes {
        Self::Story
    }
}
