/*
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// History : A history item is a group of actions that represent a transactional change to a Story.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct History {
    /// The date when the change occurred.
    #[serde(rename = "changed_at")]
    pub changed_at: String,
    /// The ID of the primary entity that has changed, if applicable.
    #[serde(rename = "primary_id", skip_serializing_if = "Option::is_none")]
    pub primary_id: Option<serde_json::Value>,
    /// An array of objects affected by the change. Reference objects provide basic information for the entities reference in the history actions. Some have specific fields, but they always contain an id, entity_type, and a name.
    #[serde(rename = "references", skip_serializing_if = "Option::is_none")]
    pub references: Option<Vec<serde_json::Value>>,
    /// An array of actions that were performed for the change.
    #[serde(rename = "actions")]
    pub actions: Vec<serde_json::Value>,
    /// The ID of the member who performed the change.
    #[serde(rename = "member_id", skip_serializing_if = "Option::is_none")]
    pub member_id: Option<uuid::Uuid>,
    /// The ID of the webhook that handled the change.
    #[serde(rename = "external_id", skip_serializing_if = "Option::is_none")]
    pub external_id: Option<String>,
    /// The ID representing the change for the story.
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    /// The version of the change format.
    #[serde(rename = "version")]
    pub version: Version,
    /// The ID of the webhook that handled the change.
    #[serde(rename = "webhook_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub webhook_id: Option<Option<String>>,
}

impl History {
    /// A history item is a group of actions that represent a transactional change to a Story.
    pub fn new(changed_at: String, actions: Vec<serde_json::Value>, id: uuid::Uuid, version: Version) -> History {
        History {
            changed_at,
            primary_id: None,
            references: None,
            actions,
            member_id: None,
            external_id: None,
            id,
            version,
            webhook_id: None,
        }
    }
}

/// The version of the change format.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Version {
    #[serde(rename = "v1")]
    V1,
}

impl Default for Version {
    fn default() -> Version {
        Self::V1
    }
}

