/*
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 *
 * Generated by: https://openapi-generator.tech
 */

/// StoryComment : A Comment is any note added within the Comment field of a Story.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct StoryComment {
    /// The Shortcut application url for the Comment.
    #[serde(rename = "app_url")]
    pub app_url: String,
    /// A string description of this resource.
    #[serde(rename = "entity_type")]
    pub entity_type: String,
    /// True/false boolean indicating whether the Comment has been deleted.
    #[serde(rename = "deleted")]
    pub deleted: bool,
    /// The ID of the Story on which the Comment appears.
    #[serde(rename = "story_id")]
    pub story_id: i64,
    /// Deprecated: use member_mention_ids.
    #[serde(rename = "mention_ids")]
    pub mention_ids: Vec<uuid::Uuid>,
    /// The unique ID of the Member who is the Comment's author.
    #[serde(rename = "author_id", deserialize_with = "Option::deserialize")]
    pub author_id: Option<uuid::Uuid>,
    /// The unique IDs of the Member who are mentioned in the Comment.
    #[serde(rename = "member_mention_ids")]
    pub member_mention_ids: Vec<uuid::Uuid>,
    /// Marks the comment as a blocker that can be surfaced to permissions or teams mentioned in
    /// the comment. Can only be used on a top-level comment.
    #[serde(rename = "blocker", skip_serializing_if = "Option::is_none")]
    pub blocker: Option<bool>,
    /// The time/date when the Comment was updated.
    #[serde(rename = "updated_at", deserialize_with = "Option::deserialize")]
    pub updated_at: Option<String>,
    /// The unique IDs of the Group who are mentioned in the Comment.
    #[serde(rename = "group_mention_ids")]
    pub group_mention_ids: Vec<uuid::Uuid>,
    /// This field can be set to another unique ID. In the case that the Comment has been imported
    /// from another tool, the ID in the other tool can be indicated here.
    #[serde(rename = "external_id", deserialize_with = "Option::deserialize")]
    pub external_id: Option<String>,
    /// The ID of the parent Comment this Comment is threaded under.
    #[serde(
        rename = "parent_id",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub parent_id: Option<Option<i64>>,
    /// The unique ID of the Comment.
    #[serde(rename = "id")]
    pub id: i64,
    /// The Comments numerical position in the list from oldest to newest.
    #[serde(rename = "position")]
    pub position: i64,
    /// Marks the comment as an unblocker to its  blocker parent. Can only be set on a threaded
    /// comment who has a parent with `blocker` set.
    #[serde(rename = "unblocks_parent", skip_serializing_if = "Option::is_none")]
    pub unblocks_parent: Option<bool>,
    /// A set of Reactions to this Comment.
    #[serde(rename = "reactions")]
    pub reactions: Vec<crate::models::StoryReaction>,
    /// The time/date when the Comment was created.
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// The text of the Comment. In the case that the Comment has been deleted, this field can be
    /// set to nil.
    #[serde(rename = "text", deserialize_with = "Option::deserialize")]
    pub text: Option<String>,
}

impl StoryComment {
    /// A Comment is any note added within the Comment field of a Story.
    pub fn new(
        app_url: String,
        entity_type: String,
        deleted: bool,
        story_id: i64,
        mention_ids: Vec<uuid::Uuid>,
        author_id: Option<uuid::Uuid>,
        member_mention_ids: Vec<uuid::Uuid>,
        updated_at: Option<String>,
        group_mention_ids: Vec<uuid::Uuid>,
        external_id: Option<String>,
        id: i64,
        position: i64,
        reactions: Vec<crate::models::StoryReaction>,
        created_at: String,
        text: Option<String>,
    ) -> StoryComment {
        StoryComment {
            app_url,
            entity_type,
            deleted,
            story_id,
            mention_ids,
            author_id,
            member_mention_ids,
            blocker: None,
            updated_at,
            group_mention_ids,
            external_id,
            parent_id: None,
            id,
            position,
            unblocks_parent: None,
            reactions,
            created_at,
            text,
        }
    }
}
