/*
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// HistoryActionProjectUpdate : An action representing a Project being updated.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct HistoryActionProjectUpdate {
    /// The ID of the entity referenced.
    #[serde(rename = "id")]
    pub id: i64,
    /// The type of entity referenced.
    #[serde(rename = "entity_type")]
    pub entity_type: String,
    /// The action of the entity referenced.
    #[serde(rename = "action")]
    pub action: Action,
    /// The application URL of the Project.
    #[serde(rename = "app_url")]
    pub app_url: String,
    /// The name of the Project.
    #[serde(rename = "name")]
    pub name: String,
}

impl HistoryActionProjectUpdate {
    /// An action representing a Project being updated.
    pub fn new(id: i64, entity_type: String, action: Action, app_url: String, name: String) -> HistoryActionProjectUpdate {
        HistoryActionProjectUpdate {
            id,
            entity_type,
            action,
            app_url,
            name,
        }
    }
}

/// The action of the entity referenced.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "update")]
    Update,
}

impl Default for Action {
    fn default() -> Action {
        Self::Update
    }
}

