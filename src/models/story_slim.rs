/*
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// StorySlim : StorySlim represents the same resource as a Story, but is more light-weight. For certain fields it provides ids rather than full resources (e.g., `comment_ids` and `file_ids`) and it also excludes certain aggregate values (e.g., `cycle_time`). The `description` field can be optionally included. Use the [Get Story](#Get-Story) endpoint to fetch the unabridged payload for a Story.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct StorySlim {
    /// The Shortcut application url for the Story.
    #[serde(rename = "app_url")]
    pub app_url: String,
    /// The description of the Story.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// True if the story has been archived or not.
    #[serde(rename = "archived")]
    pub archived: bool,
    /// A true/false boolean indicating if the Story has been started.
    #[serde(rename = "started")]
    pub started: bool,
    /// An array of story links attached to the Story.
    #[serde(rename = "story_links")]
    pub story_links: Vec<crate::models::TypedStoryLink>,
    /// A string description of this resource.
    #[serde(rename = "entity_type")]
    pub entity_type: String,
    /// An array of labels attached to the story.
    #[serde(rename = "labels")]
    pub labels: Vec<crate::models::LabelSlim>,
    /// An array of IDs of Tasks attached to the story.
    #[serde(rename = "task_ids")]
    pub task_ids: Vec<i64>,
    /// Deprecated: use member_mention_ids.
    #[serde(rename = "mention_ids")]
    pub mention_ids: Vec<uuid::Uuid>,
    #[serde(rename = "synced_item", skip_serializing_if = "Option::is_none")]
    pub synced_item: Option<Box<crate::models::SyncedItem>>,
    /// An array of Member IDs that have been mentioned in the Story description.
    #[serde(rename = "member_mention_ids")]
    pub member_mention_ids: Vec<uuid::Uuid>,
    /// The type of story (feature, bug, chore).
    #[serde(rename = "story_type")]
    pub story_type: String,
    /// An array of CustomField value assertions for the story.
    #[serde(rename = "custom_fields", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<Vec<crate::models::StoryCustomField>>,
    /// An array of IDs of Files attached to the story.
    #[serde(rename = "file_ids")]
    pub file_ids: Vec<i64>,
    /// The number of tasks on the story which are complete.
    #[serde(rename = "num_tasks_completed")]
    pub num_tasks_completed: i64,
    /// The ID of the workflow the story belongs to.
    #[serde(rename = "workflow_id")]
    pub workflow_id: i64,
    /// A manual override for the time/date the Story was completed.
    #[serde(rename = "completed_at_override", deserialize_with = "Option::deserialize")]
    pub completed_at_override: Option<String>,
    /// The time/date the Story was started.
    #[serde(rename = "started_at", deserialize_with = "Option::deserialize")]
    pub started_at: Option<String>,
    /// The time/date the Story was completed.
    #[serde(rename = "completed_at", deserialize_with = "Option::deserialize")]
    pub completed_at: Option<String>,
    /// The name of the story.
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "global_id")]
    pub global_id: String,
    /// A true/false boolean indicating if the Story has been completed.
    #[serde(rename = "completed")]
    pub completed: bool,
    /// A true/false boolean indicating if the Story is currently a blocker of another story.
    #[serde(rename = "blocker")]
    pub blocker: bool,
    /// The ID of the epic the story belongs to.
    #[serde(rename = "epic_id", deserialize_with = "Option::deserialize")]
    pub epic_id: Option<i64>,
    /// The IDs of any unresolved blocker comments on the Story.
    #[serde(rename = "unresolved_blocker_comments", skip_serializing_if = "Option::is_none")]
    pub unresolved_blocker_comments: Option<Vec<i64>>,
    /// The ID of the story template used to create this story, or null if not created using a template.
    #[serde(rename = "story_template_id", deserialize_with = "Option::deserialize")]
    pub story_template_id: Option<uuid::Uuid>,
    /// An array of external links (strings) associated with a Story
    #[serde(rename = "external_links")]
    pub external_links: Vec<String>,
    /// The IDs of the iteration the story belongs to.
    #[serde(rename = "previous_iteration_ids")]
    pub previous_iteration_ids: Vec<i64>,
    /// The ID of the Member that requested the story.
    #[serde(rename = "requested_by_id")]
    pub requested_by_id: uuid::Uuid,
    /// The ID of the iteration the story belongs to.
    #[serde(rename = "iteration_id", deserialize_with = "Option::deserialize")]
    pub iteration_id: Option<i64>,
    /// An array of label ids attached to the story.
    #[serde(rename = "label_ids")]
    pub label_ids: Vec<i64>,
    /// A manual override for the time/date the Story was started.
    #[serde(rename = "started_at_override", deserialize_with = "Option::deserialize")]
    pub started_at_override: Option<String>,
    /// The ID of the group associated with the story.
    #[serde(rename = "group_id", deserialize_with = "Option::deserialize")]
    pub group_id: Option<uuid::Uuid>,
    /// The ID of the workflow state the story is currently in.
    #[serde(rename = "workflow_state_id")]
    pub workflow_state_id: i64,
    /// The time/date the Story was updated.
    #[serde(rename = "updated_at", deserialize_with = "Option::deserialize")]
    pub updated_at: Option<String>,
    /// An array of Group IDs that have been mentioned in the Story description.
    #[serde(rename = "group_mention_ids")]
    pub group_mention_ids: Vec<uuid::Uuid>,
    /// An array of UUIDs for any Members listed as Followers.
    #[serde(rename = "follower_ids")]
    pub follower_ids: Vec<uuid::Uuid>,
    /// An array of UUIDs of the owners of this story.
    #[serde(rename = "owner_ids")]
    pub owner_ids: Vec<uuid::Uuid>,
    /// This field can be set to another unique ID. In the case that the Story has been imported from another tool, the ID in the other tool can be indicated here.
    #[serde(rename = "external_id", deserialize_with = "Option::deserialize")]
    pub external_id: Option<String>,
    /// The unique ID of the Story.
    #[serde(rename = "id")]
    pub id: i64,
    /// The lead time (in seconds) of this story when complete.
    #[serde(rename = "lead_time", skip_serializing_if = "Option::is_none")]
    pub lead_time: Option<i64>,
    /// The numeric point estimate of the story. Can also be null, which means unestimated.
    #[serde(rename = "estimate", deserialize_with = "Option::deserialize")]
    pub estimate: Option<i64>,
    /// A number representing the position of the story in relation to every other story in the current project.
    #[serde(rename = "position")]
    pub position: i64,
    /// A true/false boolean indicating if the Story is currently blocked.
    #[serde(rename = "blocked")]
    pub blocked: bool,
    /// The ID of the project the story belongs to.
    #[serde(rename = "project_id", deserialize_with = "Option::deserialize")]
    pub project_id: Option<i64>,
    /// An array of IDs of LinkedFiles attached to the story.
    #[serde(rename = "linked_file_ids")]
    pub linked_file_ids: Vec<i64>,
    /// The due date of the story.
    #[serde(rename = "deadline", deserialize_with = "Option::deserialize")]
    pub deadline: Option<String>,
    #[serde(rename = "stats")]
    pub stats: Box<crate::models::StoryStats>,
    /// An array of IDs of Comments attached to the story.
    #[serde(rename = "comment_ids")]
    pub comment_ids: Vec<i64>,
    /// The cycle time (in seconds) of this story when complete.
    #[serde(rename = "cycle_time", skip_serializing_if = "Option::is_none")]
    pub cycle_time: Option<i64>,
    /// The time/date the Story was created.
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// The time/date the Story was last changed workflow-state.
    #[serde(rename = "moved_at", deserialize_with = "Option::deserialize")]
    pub moved_at: Option<String>,
}

impl StorySlim {
    /// StorySlim represents the same resource as a Story, but is more light-weight. For certain fields it provides ids rather than full resources (e.g., `comment_ids` and `file_ids`) and it also excludes certain aggregate values (e.g., `cycle_time`). The `description` field can be optionally included. Use the [Get Story](#Get-Story) endpoint to fetch the unabridged payload for a Story.
    pub fn new(app_url: String, archived: bool, started: bool, story_links: Vec<crate::models::TypedStoryLink>, entity_type: String, labels: Vec<crate::models::LabelSlim>, task_ids: Vec<i64>, mention_ids: Vec<uuid::Uuid>, member_mention_ids: Vec<uuid::Uuid>, story_type: String, file_ids: Vec<i64>, num_tasks_completed: i64, workflow_id: i64, completed_at_override: Option<String>, started_at: Option<String>, completed_at: Option<String>, name: String, global_id: String, completed: bool, blocker: bool, epic_id: Option<i64>, story_template_id: Option<uuid::Uuid>, external_links: Vec<String>, previous_iteration_ids: Vec<i64>, requested_by_id: uuid::Uuid, iteration_id: Option<i64>, label_ids: Vec<i64>, started_at_override: Option<String>, group_id: Option<uuid::Uuid>, workflow_state_id: i64, updated_at: Option<String>, group_mention_ids: Vec<uuid::Uuid>, follower_ids: Vec<uuid::Uuid>, owner_ids: Vec<uuid::Uuid>, external_id: Option<String>, id: i64, estimate: Option<i64>, position: i64, blocked: bool, project_id: Option<i64>, linked_file_ids: Vec<i64>, deadline: Option<String>, stats: crate::models::StoryStats, comment_ids: Vec<i64>, created_at: String, moved_at: Option<String>) -> StorySlim {
        StorySlim {
            app_url,
            description: None,
            archived,
            started,
            story_links,
            entity_type,
            labels,
            task_ids,
            mention_ids,
            synced_item: None,
            member_mention_ids,
            story_type,
            custom_fields: None,
            file_ids,
            num_tasks_completed,
            workflow_id,
            completed_at_override,
            started_at,
            completed_at,
            name,
            global_id,
            completed,
            blocker,
            epic_id,
            unresolved_blocker_comments: None,
            story_template_id,
            external_links,
            previous_iteration_ids,
            requested_by_id,
            iteration_id,
            label_ids,
            started_at_override,
            group_id,
            workflow_state_id,
            updated_at,
            group_mention_ids,
            follower_ids,
            owner_ids,
            external_id,
            id,
            lead_time: None,
            estimate,
            position,
            blocked,
            project_id,
            linked_file_ids,
            deadline,
            stats: Box::new(stats),
            comment_ids,
            cycle_time: None,
            created_at,
            moved_at,
        }
    }
}


