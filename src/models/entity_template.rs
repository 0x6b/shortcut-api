/*
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// EntityTemplate : An entity template can be used to prefill various fields when creating new stories.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct EntityTemplate {
    /// A string description of this resource.
    #[serde(rename = "entity_type")]
    pub entity_type: String,
    /// The unique identifier for the entity template.
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    /// The time/date when the entity template was created.
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// The time/date when the entity template was last updated.
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    /// The template's name.
    #[serde(rename = "name")]
    pub name: String,
    /// The unique ID of the member who created the template.
    #[serde(rename = "author_id")]
    pub author_id: uuid::Uuid,
    /// The last time that someone created an entity using this template.
    #[serde(rename = "last_used_at")]
    pub last_used_at: String,
    #[serde(rename = "story_contents")]
    pub story_contents: Box<crate::models::StoryContents>,
}

impl EntityTemplate {
    /// An entity template can be used to prefill various fields when creating new stories.
    pub fn new(entity_type: String, id: uuid::Uuid, created_at: String, updated_at: String, name: String, author_id: uuid::Uuid, last_used_at: String, story_contents: crate::models::StoryContents) -> EntityTemplate {
        EntityTemplate {
            entity_type,
            id,
            created_at,
            updated_at,
            name,
            author_id,
            last_used_at,
            story_contents: Box::new(story_contents),
        }
    }
}


