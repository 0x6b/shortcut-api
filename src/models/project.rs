/*
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 *
 * Generated by: https://openapi-generator.tech
 */

/// Project : Projects typically map to teams (such as Frontend, Backend, Mobile, Devops, etc) but
/// can represent any open-ended product, component, or initiative.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Project {
    /// The Shortcut application url for the Project.
    #[serde(rename = "app_url")]
    pub app_url: String,
    /// The description of the Project.
    #[serde(rename = "description", deserialize_with = "Option::deserialize")]
    pub description: Option<String>,
    /// True/false boolean indicating whether the Project is in an Archived state.
    #[serde(rename = "archived")]
    pub archived: bool,
    /// A string description of this resource.
    #[serde(rename = "entity_type")]
    pub entity_type: String,
    /// The number of days before the thermometer appears in the Story summary.
    #[serde(rename = "days_to_thermometer")]
    pub days_to_thermometer: i64,
    /// The color associated with the Project in the Shortcut member interface.
    #[serde(rename = "color", deserialize_with = "Option::deserialize")]
    pub color: Option<String>,
    /// The ID of the workflow the project belongs to.
    #[serde(rename = "workflow_id")]
    pub workflow_id: i64,
    /// The name of the Project
    #[serde(rename = "name")]
    pub name: String,
    /// The date at which the Project was started.
    #[serde(rename = "start_time")]
    pub start_time: String,
    /// The time/date that the Project was last updated.
    #[serde(rename = "updated_at", deserialize_with = "Option::deserialize")]
    pub updated_at: Option<String>,
    /// An array of UUIDs for any Members listed as Followers.
    #[serde(rename = "follower_ids")]
    pub follower_ids: Vec<uuid::Uuid>,
    /// This field can be set to another unique ID. In the case that the Project has been imported
    /// from another tool, the ID in the other tool can be indicated here.
    #[serde(rename = "external_id", deserialize_with = "Option::deserialize")]
    pub external_id: Option<String>,
    /// The unique ID of the Project.
    #[serde(rename = "id")]
    pub id: i64,
    /// Configuration to enable or disable thermometers in the Story summary.
    #[serde(rename = "show_thermometer")]
    pub show_thermometer: bool,
    /// The ID of the team the project belongs to.
    #[serde(rename = "team_id")]
    pub team_id: i64,
    /// The number of weeks per iteration in this Project.
    #[serde(rename = "iteration_length")]
    pub iteration_length: i64,
    /// The Project abbreviation used in Story summaries. Should be kept to 3 characters at most.
    #[serde(rename = "abbreviation", deserialize_with = "Option::deserialize")]
    pub abbreviation: Option<String>,
    #[serde(rename = "stats")]
    pub stats: Box<crate::models::ProjectStats>,
    /// The time/date that the Project was created.
    #[serde(rename = "created_at", deserialize_with = "Option::deserialize")]
    pub created_at: Option<String>,
}

impl Project {
    /// Projects typically map to teams (such as Frontend, Backend, Mobile, Devops, etc) but can
    /// represent any open-ended product, component, or initiative.
    pub fn new(
        app_url: String,
        description: Option<String>,
        archived: bool,
        entity_type: String,
        days_to_thermometer: i64,
        color: Option<String>,
        workflow_id: i64,
        name: String,
        start_time: String,
        updated_at: Option<String>,
        follower_ids: Vec<uuid::Uuid>,
        external_id: Option<String>,
        id: i64,
        show_thermometer: bool,
        team_id: i64,
        iteration_length: i64,
        abbreviation: Option<String>,
        stats: crate::models::ProjectStats,
        created_at: Option<String>,
    ) -> Project {
        Project {
            app_url,
            description,
            archived,
            entity_type,
            days_to_thermometer,
            color,
            workflow_id,
            name,
            start_time,
            updated_at,
            follower_ids,
            external_id,
            id,
            show_thermometer,
            team_id,
            iteration_length,
            abbreviation,
            stats: Box::new(stats),
            created_at,
        }
    }
}
