/*
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 *
 * Generated by: https://openapi-generator.tech
 */

/// Group : A Group.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Group {
    /// The Shortcut application url for the Group.
    #[serde(rename = "app_url")]
    pub app_url: String,
    /// The description of the Group.
    #[serde(rename = "description")]
    pub description: String,
    /// Whether or not the Group is archived.
    #[serde(rename = "archived")]
    pub archived: bool,
    /// A string description of this resource.
    #[serde(rename = "entity_type")]
    pub entity_type: String,
    /// The hex color to be displayed with the Group (for example, \"#ff0000\").
    #[serde(rename = "color", deserialize_with = "Option::deserialize")]
    pub color: Option<String>,
    /// The number of stories assigned to the group which are in a started workflow state.
    #[serde(rename = "num_stories_started")]
    pub num_stories_started: i64,
    /// The mention name of the Group.
    #[serde(rename = "mention_name")]
    pub mention_name: String,
    /// The name of the Group.
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "global_id")]
    pub global_id: String,
    /// The color key to be displayed with the Group.
    #[serde(rename = "color_key", deserialize_with = "Option::deserialize")]
    pub color_key: Option<ColorKey>,
    /// The total number of stories assigned ot the group.
    #[serde(rename = "num_stories")]
    pub num_stories: i64,
    /// The number of epics assigned to the group which are in the started workflow state.
    #[serde(rename = "num_epics_started")]
    pub num_epics_started: i64,
    /// The number of stories assigned to the group which are in a backlog workflow state.
    #[serde(rename = "num_stories_backlog")]
    pub num_stories_backlog: i64,
    /// The id of the Group.
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "display_icon")]
    pub display_icon: Box<crate::models::Icon>,
    /// The Member IDs contain within the Group.
    #[serde(rename = "member_ids")]
    pub member_ids: Vec<uuid::Uuid>,
    /// The Workflow IDs contained within the Group.
    #[serde(rename = "workflow_ids")]
    pub workflow_ids: Vec<i64>,
}

impl Group {
    /// A Group.
    pub fn new(
        app_url: String,
        description: String,
        archived: bool,
        entity_type: String,
        color: Option<String>,
        num_stories_started: i64,
        mention_name: String,
        name: String,
        global_id: String,
        color_key: Option<ColorKey>,
        num_stories: i64,
        num_epics_started: i64,
        num_stories_backlog: i64,
        id: uuid::Uuid,
        display_icon: crate::models::Icon,
        member_ids: Vec<uuid::Uuid>,
        workflow_ids: Vec<i64>,
    ) -> Group {
        Group {
            app_url,
            description,
            archived,
            entity_type,
            color,
            num_stories_started,
            mention_name,
            name,
            global_id,
            color_key,
            num_stories,
            num_epics_started,
            num_stories_backlog,
            id,
            display_icon: Box::new(display_icon),
            member_ids,
            workflow_ids,
        }
    }
}

/// The color key to be displayed with the Group.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ColorKey {
    #[serde(rename = "blue")]
    Blue,
    #[serde(rename = "purple")]
    Purple,
    #[serde(rename = "midnight-blue")]
    MidnightBlue,
    #[serde(rename = "orange")]
    Orange,
    #[serde(rename = "yellow-green")]
    YellowGreen,
    #[serde(rename = "brass")]
    Brass,
    #[serde(rename = "gray")]
    Gray,
    #[serde(rename = "fuchsia")]
    Fuchsia,
    #[serde(rename = "yellow")]
    Yellow,
    #[serde(rename = "pink")]
    Pink,
    #[serde(rename = "sky-blue")]
    SkyBlue,
    #[serde(rename = "green")]
    Green,
    #[serde(rename = "red")]
    Red,
    #[serde(rename = "black")]
    Black,
    #[serde(rename = "slate")]
    Slate,
    #[serde(rename = "turquoise")]
    Turquoise,
}

impl Default for ColorKey {
    fn default() -> ColorKey {
        Self::Blue
    }
}
