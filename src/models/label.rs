/*
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 *
 * Generated by: https://openapi-generator.tech
 */

/// Label : A Label can be used to associate and filter Stories and Epics, and also create new
/// Workspaces.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Label {
    /// The Shortcut application url for the Label.
    #[serde(rename = "app_url")]
    pub app_url: String,
    /// The description of the Label.
    #[serde(rename = "description", deserialize_with = "Option::deserialize")]
    pub description: Option<String>,
    /// A true/false boolean indicating if the Label has been archived.
    #[serde(rename = "archived")]
    pub archived: bool,
    /// A string description of this resource.
    #[serde(rename = "entity_type")]
    pub entity_type: String,
    /// The hex color to be displayed with the Label (for example, \"#ff0000\").
    #[serde(rename = "color", deserialize_with = "Option::deserialize")]
    pub color: Option<String>,
    /// The name of the Label.
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "global_id")]
    pub global_id: String,
    /// The time/date that the Label was updated.
    #[serde(rename = "updated_at", deserialize_with = "Option::deserialize")]
    pub updated_at: Option<String>,
    /// This field can be set to another unique ID. In the case that the Label has been imported
    /// from another tool, the ID in the other tool can be indicated here.
    #[serde(rename = "external_id", deserialize_with = "Option::deserialize")]
    pub external_id: Option<String>,
    /// The unique ID of the Label.
    #[serde(rename = "id")]
    pub id: i64,
    #[serde(rename = "stats", skip_serializing_if = "Option::is_none")]
    pub stats: Option<Box<crate::models::LabelStats>>,
    /// The time/date that the Label was created.
    #[serde(rename = "created_at", deserialize_with = "Option::deserialize")]
    pub created_at: Option<String>,
}

impl Label {
    /// A Label can be used to associate and filter Stories and Epics, and also create new
    /// Workspaces.
    pub fn new(
        app_url: String,
        description: Option<String>,
        archived: bool,
        entity_type: String,
        color: Option<String>,
        name: String,
        global_id: String,
        updated_at: Option<String>,
        external_id: Option<String>,
        id: i64,
        created_at: Option<String>,
    ) -> Label {
        Label {
            app_url,
            description,
            archived,
            entity_type,
            color,
            name,
            global_id,
            updated_at,
            external_id,
            id,
            stats: None,
            created_at,
        }
    }
}
