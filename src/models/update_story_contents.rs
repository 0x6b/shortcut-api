/*
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 *
 * Generated by: https://openapi-generator.tech
 */

/// UpdateStoryContents : Updated attributes for the template to populate.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct UpdateStoryContents {
    /// The description of the story.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// A string description of this resource.
    #[serde(rename = "entity_type", skip_serializing_if = "Option::is_none")]
    pub entity_type: Option<String>,
    /// An array of labels to be populated by the template.
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<crate::models::CreateLabelParams>>,
    /// The type of story (feature, bug, chore).
    #[serde(rename = "story_type", skip_serializing_if = "Option::is_none")]
    pub story_type: Option<String>,
    /// An array of maps specifying a CustomField ID and CustomFieldEnumValue ID that represents an
    /// assertion of some value for a CustomField.
    #[serde(rename = "custom_fields", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<Vec<crate::models::CustomFieldValueParams>>,
    /// An array of linked files attached to the story.
    #[serde(rename = "linked_files", skip_serializing_if = "Option::is_none")]
    pub linked_files: Option<Vec<crate::models::LinkedFile>>,
    /// An array of the attached file IDs to be populated.
    #[serde(rename = "file_ids", skip_serializing_if = "Option::is_none")]
    pub file_ids: Option<Vec<i64>>,
    /// The name of the story.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The ID of the epic the to be populated.
    #[serde(
        rename = "epic_id",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub epic_id: Option<Option<i64>>,
    /// An array of external links to be populated.
    #[serde(rename = "external_links", skip_serializing_if = "Option::is_none")]
    pub external_links: Option<Vec<String>>,
    /// The ID of the iteration the to be populated.
    #[serde(
        rename = "iteration_id",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub iteration_id: Option<Option<i64>>,
    /// An array of tasks to be populated by the template.
    #[serde(rename = "tasks", skip_serializing_if = "Option::is_none")]
    pub tasks: Option<Vec<crate::models::EntityTemplateTask>>,
    /// An array of label ids attached to the story.
    #[serde(rename = "label_ids", skip_serializing_if = "Option::is_none")]
    pub label_ids: Option<Vec<i64>>,
    /// The ID of the group to be populated.
    #[serde(
        rename = "group_id",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub group_id: Option<Option<uuid::Uuid>>,
    /// The ID of the workflow state the story is currently in.
    #[serde(rename = "workflow_state_id", skip_serializing_if = "Option::is_none")]
    pub workflow_state_id: Option<i64>,
    /// An array of UUIDs for any Members listed as Followers.
    #[serde(rename = "follower_ids", skip_serializing_if = "Option::is_none")]
    pub follower_ids: Option<Vec<uuid::Uuid>>,
    /// An array of UUIDs of the owners of this story.
    #[serde(rename = "owner_ids", skip_serializing_if = "Option::is_none")]
    pub owner_ids: Option<Vec<uuid::Uuid>>,
    /// The numeric point estimate to be populated.
    #[serde(
        rename = "estimate",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub estimate: Option<Option<i64>>,
    /// An array of files attached to the story.
    #[serde(rename = "files", skip_serializing_if = "Option::is_none")]
    pub files: Option<Vec<crate::models::UploadedFile>>,
    /// The ID of the project the story belongs to.
    #[serde(
        rename = "project_id",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub project_id: Option<Option<i64>>,
    /// An array of the linked file IDs to be populated.
    #[serde(rename = "linked_file_ids", skip_serializing_if = "Option::is_none")]
    pub linked_file_ids: Option<Vec<i64>>,
    /// The due date of the story.
    #[serde(
        rename = "deadline",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub deadline: Option<Option<String>>,
}

impl UpdateStoryContents {
    /// Updated attributes for the template to populate.
    pub fn new() -> UpdateStoryContents {
        UpdateStoryContents {
            description: None,
            entity_type: None,
            labels: None,
            story_type: None,
            custom_fields: None,
            linked_files: None,
            file_ids: None,
            name: None,
            epic_id: None,
            external_links: None,
            iteration_id: None,
            tasks: None,
            label_ids: None,
            group_id: None,
            workflow_state_id: None,
            follower_ids: None,
            owner_ids: None,
            estimate: None,
            files: None,
            project_id: None,
            linked_file_ids: None,
            deadline: None,
        }
    }
}
