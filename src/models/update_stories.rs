/*
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct UpdateStories {
    /// If the Stories should be archived or not.
    #[serde(rename = "archived", skip_serializing_if = "Option::is_none")]
    pub archived: Option<bool>,
    /// The Ids of the Stories you wish to update.
    #[serde(rename = "story_ids")]
    pub story_ids: Vec<i64>,
    /// The type of story (feature, bug, chore).
    #[serde(rename = "story_type", skip_serializing_if = "Option::is_none")]
    pub story_type: Option<StoryType>,
    /// One of \"first\" or \"last\". This can be used to move the given story to the first or last position in the workflow state.
    #[serde(rename = "move_to", skip_serializing_if = "Option::is_none")]
    pub move_to: Option<MoveTo>,
    /// The UUIDs of the new followers to be added.
    #[serde(rename = "follower_ids_add", skip_serializing_if = "Option::is_none")]
    pub follower_ids_add: Option<Vec<uuid::Uuid>>,
    /// The ID of the epic the story belongs to.
    #[serde(rename = "epic_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub epic_id: Option<Option<i64>>,
    /// An array of External Links associated with this story.
    #[serde(rename = "external_links", skip_serializing_if = "Option::is_none")]
    pub external_links: Option<Vec<String>>,
    /// The UUIDs of the followers to be removed.
    #[serde(rename = "follower_ids_remove", skip_serializing_if = "Option::is_none")]
    pub follower_ids_remove: Option<Vec<uuid::Uuid>>,
    /// The ID of the member that requested the story.
    #[serde(rename = "requested_by_id", skip_serializing_if = "Option::is_none")]
    pub requested_by_id: Option<uuid::Uuid>,
    /// The ID of the iteration the story belongs to.
    #[serde(rename = "iteration_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub iteration_id: Option<Option<i64>>,
    /// A map specifying a CustomField ID and CustomFieldEnumValue ID that represents an assertion of some value for a CustomField.
    #[serde(rename = "custom_fields_remove", skip_serializing_if = "Option::is_none")]
    pub custom_fields_remove: Option<Vec<crate::models::CustomFieldValueParams>>,
    /// An array of labels to be added.
    #[serde(rename = "labels_add", skip_serializing_if = "Option::is_none")]
    pub labels_add: Option<Vec<crate::models::CreateLabelParams>>,
    /// The Id of the Group the Stories should belong to.
    #[serde(rename = "group_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub group_id: Option<Option<uuid::Uuid>>,
    /// The ID of the workflow state to put the stories in.
    #[serde(rename = "workflow_state_id", skip_serializing_if = "Option::is_none")]
    pub workflow_state_id: Option<i64>,
    /// The ID of the story that the stories are to be moved before.
    #[serde(rename = "before_id", skip_serializing_if = "Option::is_none")]
    pub before_id: Option<i64>,
    /// The numeric point estimate of the story. Can also be null, which means unestimated.
    #[serde(rename = "estimate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub estimate: Option<Option<i64>>,
    /// The ID of the story that the stories are to be moved below.
    #[serde(rename = "after_id", skip_serializing_if = "Option::is_none")]
    pub after_id: Option<i64>,
    /// The UUIDs of the owners to be removed.
    #[serde(rename = "owner_ids_remove", skip_serializing_if = "Option::is_none")]
    pub owner_ids_remove: Option<Vec<uuid::Uuid>>,
    /// A map specifying a CustomField ID and CustomFieldEnumValue ID that represents an assertion of some value for a CustomField.
    #[serde(rename = "custom_fields_add", skip_serializing_if = "Option::is_none")]
    pub custom_fields_add: Option<Vec<crate::models::CustomFieldValueParams>>,
    /// The ID of the Project the Stories should belong to.
    #[serde(rename = "project_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub project_id: Option<Option<i64>>,
    /// An array of labels to be removed.
    #[serde(rename = "labels_remove", skip_serializing_if = "Option::is_none")]
    pub labels_remove: Option<Vec<crate::models::CreateLabelParams>>,
    /// The due date of the story.
    #[serde(rename = "deadline", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub deadline: Option<Option<String>>,
    /// The UUIDs of the new owners to be added.
    #[serde(rename = "owner_ids_add", skip_serializing_if = "Option::is_none")]
    pub owner_ids_add: Option<Vec<uuid::Uuid>>,
}

impl UpdateStories {
    pub fn new(story_ids: Vec<i64>) -> UpdateStories {
        UpdateStories {
            archived: None,
            story_ids,
            story_type: None,
            move_to: None,
            follower_ids_add: None,
            epic_id: None,
            external_links: None,
            follower_ids_remove: None,
            requested_by_id: None,
            iteration_id: None,
            custom_fields_remove: None,
            labels_add: None,
            group_id: None,
            workflow_state_id: None,
            before_id: None,
            estimate: None,
            after_id: None,
            owner_ids_remove: None,
            custom_fields_add: None,
            project_id: None,
            labels_remove: None,
            deadline: None,
            owner_ids_add: None,
        }
    }
}

/// The type of story (feature, bug, chore).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StoryType {
    #[serde(rename = "feature")]
    Feature,
    #[serde(rename = "chore")]
    Chore,
    #[serde(rename = "bug")]
    Bug,
}

impl Default for StoryType {
    fn default() -> StoryType {
        Self::Feature
    }
}
/// One of \"first\" or \"last\". This can be used to move the given story to the first or last position in the workflow state.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MoveTo {
    #[serde(rename = "last")]
    Last,
    #[serde(rename = "first")]
    First,
}

impl Default for MoveTo {
    fn default() -> MoveTo {
        Self::Last
    }
}

