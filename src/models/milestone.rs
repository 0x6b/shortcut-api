/*
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Milestone : A Milestone is a collection of Epics that represent a release or some other large initiative that you are working on.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Milestone {
    /// The Shortcut application url for the Milestone.
    #[serde(rename = "app_url")]
    pub app_url: String,
    /// The Milestone's description.
    #[serde(rename = "description")]
    pub description: String,
    /// A boolean indicating whether the Milestone has been archived or not.
    #[serde(rename = "archived")]
    pub archived: bool,
    /// A true/false boolean indicating if the Milestone has been started.
    #[serde(rename = "started")]
    pub started: bool,
    /// A string description of this resource.
    #[serde(rename = "entity_type")]
    pub entity_type: String,
    /// A manual override for the time/date the Milestone was completed.
    #[serde(rename = "completed_at_override", deserialize_with = "Option::deserialize")]
    pub completed_at_override: Option<String>,
    /// The time/date the Milestone was started.
    #[serde(rename = "started_at", deserialize_with = "Option::deserialize")]
    pub started_at: Option<String>,
    /// The time/date the Milestone was completed.
    #[serde(rename = "completed_at", deserialize_with = "Option::deserialize")]
    pub completed_at: Option<String>,
    /// The name of the Milestone.
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "global_id")]
    pub global_id: String,
    /// A true/false boolean indicating if the Milestone has been completed.
    #[serde(rename = "completed")]
    pub completed: bool,
    /// The workflow state that the Milestone is in.
    #[serde(rename = "state")]
    pub state: String,
    /// A manual override for the time/date the Milestone was started.
    #[serde(rename = "started_at_override", deserialize_with = "Option::deserialize")]
    pub started_at_override: Option<String>,
    /// The time/date the Milestone was updated.
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    /// An array of Categories attached to the Milestone.
    #[serde(rename = "categories")]
    pub categories: Vec<crate::models::Category>,
    /// The unique ID of the Milestone.
    #[serde(rename = "id")]
    pub id: i64,
    /// A number representing the position of the Milestone in relation to every other Milestone within the Workspace.
    #[serde(rename = "position")]
    pub position: i64,
    #[serde(rename = "stats")]
    pub stats: Box<crate::models::MilestoneStats>,
    /// The time/date the Milestone was created.
    #[serde(rename = "created_at")]
    pub created_at: String,
}

impl Milestone {
    /// A Milestone is a collection of Epics that represent a release or some other large initiative that you are working on.
    pub fn new(app_url: String, description: String, archived: bool, started: bool, entity_type: String, completed_at_override: Option<String>, started_at: Option<String>, completed_at: Option<String>, name: String, global_id: String, completed: bool, state: String, started_at_override: Option<String>, updated_at: String, categories: Vec<crate::models::Category>, id: i64, position: i64, stats: crate::models::MilestoneStats, created_at: String) -> Milestone {
        Milestone {
            app_url,
            description,
            archived,
            started,
            entity_type,
            completed_at_override,
            started_at,
            completed_at,
            name,
            global_id,
            completed,
            state,
            started_at_override,
            updated_at,
            categories,
            id,
            position,
            stats: Box::new(stats),
            created_at,
        }
    }
}


