/*
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 *
 * Generated by: https://openapi-generator.tech
 */

/// Story : Stories are the standard unit of work in Shortcut and represent individual features,
/// bugs, and chores.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Story {
    /// The Shortcut application url for the Story.
    #[serde(rename = "app_url")]
    pub app_url: String,
    /// The description of the story.
    #[serde(rename = "description")]
    pub description: String,
    /// True if the story has been archived or not.
    #[serde(rename = "archived")]
    pub archived: bool,
    /// A true/false boolean indicating if the Story has been started.
    #[serde(rename = "started")]
    pub started: bool,
    /// An array of story links attached to the Story.
    #[serde(rename = "story_links")]
    pub story_links: Vec<crate::models::TypedStoryLink>,
    /// A string description of this resource.
    #[serde(rename = "entity_type")]
    pub entity_type: String,
    /// An array of labels attached to the story.
    #[serde(rename = "labels")]
    pub labels: Vec<crate::models::LabelSlim>,
    /// Deprecated: use member_mention_ids.
    #[serde(rename = "mention_ids")]
    pub mention_ids: Vec<uuid::Uuid>,
    #[serde(rename = "synced_item", skip_serializing_if = "Option::is_none")]
    pub synced_item: Option<Box<crate::models::SyncedItem>>,
    /// An array of Member IDs that have been mentioned in the Story description.
    #[serde(rename = "member_mention_ids")]
    pub member_mention_ids: Vec<uuid::Uuid>,
    /// The type of story (feature, bug, chore).
    #[serde(rename = "story_type")]
    pub story_type: String,
    /// An array of CustomField value assertions for the story.
    #[serde(rename = "custom_fields", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<Vec<crate::models::StoryCustomField>>,
    /// An array of linked files attached to the story.
    #[serde(rename = "linked_files")]
    pub linked_files: Vec<crate::models::LinkedFile>,
    /// The ID of the workflow the story belongs to.
    #[serde(rename = "workflow_id")]
    pub workflow_id: i64,
    /// A manual override for the time/date the Story was completed.
    #[serde(rename = "completed_at_override", deserialize_with = "Option::deserialize")]
    pub completed_at_override: Option<String>,
    /// The time/date the Story was started.
    #[serde(rename = "started_at", deserialize_with = "Option::deserialize")]
    pub started_at: Option<String>,
    /// The time/date the Story was completed.
    #[serde(rename = "completed_at", deserialize_with = "Option::deserialize")]
    pub completed_at: Option<String>,
    /// The name of the story.
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "global_id")]
    pub global_id: String,
    /// A true/false boolean indicating if the Story has been completed.
    #[serde(rename = "completed")]
    pub completed: bool,
    /// An array of comments attached to the story.
    #[serde(rename = "comments")]
    pub comments: Vec<crate::models::StoryComment>,
    /// A true/false boolean indicating if the Story is currently a blocker of another story.
    #[serde(rename = "blocker")]
    pub blocker: bool,
    /// An array of Git branches attached to the story.
    #[serde(rename = "branches")]
    pub branches: Vec<crate::models::Branch>,
    /// The ID of the epic the story belongs to.
    #[serde(rename = "epic_id", deserialize_with = "Option::deserialize")]
    pub epic_id: Option<i64>,
    /// The IDs of any unresolved blocker comments on the Story.
    #[serde(rename = "unresolved_blocker_comments", skip_serializing_if = "Option::is_none")]
    pub unresolved_blocker_comments: Option<Vec<i64>>,
    /// The ID of the story template used to create this story, or null if not created using a
    /// template.
    #[serde(rename = "story_template_id", deserialize_with = "Option::deserialize")]
    pub story_template_id: Option<uuid::Uuid>,
    /// An array of external links (strings) associated with a Story
    #[serde(rename = "external_links")]
    pub external_links: Vec<String>,
    /// The IDs of the iteration the story belongs to.
    #[serde(rename = "previous_iteration_ids")]
    pub previous_iteration_ids: Vec<i64>,
    /// The ID of the Member that requested the story.
    #[serde(rename = "requested_by_id")]
    pub requested_by_id: uuid::Uuid,
    /// The ID of the iteration the story belongs to.
    #[serde(rename = "iteration_id", deserialize_with = "Option::deserialize")]
    pub iteration_id: Option<i64>,
    /// An array of tasks connected to the story.
    #[serde(rename = "tasks")]
    pub tasks: Vec<crate::models::Task>,
    /// An array of label ids attached to the story.
    #[serde(rename = "label_ids")]
    pub label_ids: Vec<i64>,
    /// A manual override for the time/date the Story was started.
    #[serde(rename = "started_at_override", deserialize_with = "Option::deserialize")]
    pub started_at_override: Option<String>,
    /// The ID of the group associated with the story.
    #[serde(rename = "group_id", deserialize_with = "Option::deserialize")]
    pub group_id: Option<uuid::Uuid>,
    /// The ID of the workflow state the story is currently in.
    #[serde(rename = "workflow_state_id")]
    pub workflow_state_id: i64,
    /// The time/date the Story was updated.
    #[serde(rename = "updated_at", deserialize_with = "Option::deserialize")]
    pub updated_at: Option<String>,
    /// An array of Pull/Merge Requests attached to the story.
    #[serde(rename = "pull_requests")]
    pub pull_requests: Vec<crate::models::PullRequest>,
    /// An array of Group IDs that have been mentioned in the Story description.
    #[serde(rename = "group_mention_ids")]
    pub group_mention_ids: Vec<uuid::Uuid>,
    /// An array of UUIDs for any Members listed as Followers.
    #[serde(rename = "follower_ids")]
    pub follower_ids: Vec<uuid::Uuid>,
    /// An array of UUIDs of the owners of this story.
    #[serde(rename = "owner_ids")]
    pub owner_ids: Vec<uuid::Uuid>,
    /// This field can be set to another unique ID. In the case that the Story has been imported
    /// from another tool, the ID in the other tool can be indicated here.
    #[serde(rename = "external_id", deserialize_with = "Option::deserialize")]
    pub external_id: Option<String>,
    /// The unique ID of the Story.
    #[serde(rename = "id")]
    pub id: i64,
    /// The lead time (in seconds) of this story when complete.
    #[serde(rename = "lead_time", skip_serializing_if = "Option::is_none")]
    pub lead_time: Option<i64>,
    /// The numeric point estimate of the story. Can also be null, which means unestimated.
    #[serde(rename = "estimate", deserialize_with = "Option::deserialize")]
    pub estimate: Option<i64>,
    /// An array of commits attached to the story.
    #[serde(rename = "commits")]
    pub commits: Vec<crate::models::Commit>,
    /// An array of files attached to the story.
    #[serde(rename = "files")]
    pub files: Vec<crate::models::UploadedFile>,
    /// A number representing the position of the story in relation to every other story in the
    /// current project.
    #[serde(rename = "position")]
    pub position: i64,
    /// A true/false boolean indicating if the Story is currently blocked.
    #[serde(rename = "blocked")]
    pub blocked: bool,
    /// The ID of the project the story belongs to.
    #[serde(rename = "project_id", deserialize_with = "Option::deserialize")]
    pub project_id: Option<i64>,
    /// The due date of the story.
    #[serde(rename = "deadline", deserialize_with = "Option::deserialize")]
    pub deadline: Option<String>,
    #[serde(rename = "stats")]
    pub stats: Box<crate::models::StoryStats>,
    /// The cycle time (in seconds) of this story when complete.
    #[serde(rename = "cycle_time", skip_serializing_if = "Option::is_none")]
    pub cycle_time: Option<i64>,
    /// The time/date the Story was created.
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// The time/date the Story was last changed workflow-state.
    #[serde(rename = "moved_at", deserialize_with = "Option::deserialize")]
    pub moved_at: Option<String>,
}

impl Story {
    /// Stories are the standard unit of work in Shortcut and represent individual features, bugs,
    /// and chores.
    pub fn new(
        app_url: String,
        description: String,
        archived: bool,
        started: bool,
        story_links: Vec<crate::models::TypedStoryLink>,
        entity_type: String,
        labels: Vec<crate::models::LabelSlim>,
        mention_ids: Vec<uuid::Uuid>,
        member_mention_ids: Vec<uuid::Uuid>,
        story_type: String,
        linked_files: Vec<crate::models::LinkedFile>,
        workflow_id: i64,
        completed_at_override: Option<String>,
        started_at: Option<String>,
        completed_at: Option<String>,
        name: String,
        global_id: String,
        completed: bool,
        comments: Vec<crate::models::StoryComment>,
        blocker: bool,
        branches: Vec<crate::models::Branch>,
        epic_id: Option<i64>,
        story_template_id: Option<uuid::Uuid>,
        external_links: Vec<String>,
        previous_iteration_ids: Vec<i64>,
        requested_by_id: uuid::Uuid,
        iteration_id: Option<i64>,
        tasks: Vec<crate::models::Task>,
        label_ids: Vec<i64>,
        started_at_override: Option<String>,
        group_id: Option<uuid::Uuid>,
        workflow_state_id: i64,
        updated_at: Option<String>,
        pull_requests: Vec<crate::models::PullRequest>,
        group_mention_ids: Vec<uuid::Uuid>,
        follower_ids: Vec<uuid::Uuid>,
        owner_ids: Vec<uuid::Uuid>,
        external_id: Option<String>,
        id: i64,
        estimate: Option<i64>,
        commits: Vec<crate::models::Commit>,
        files: Vec<crate::models::UploadedFile>,
        position: i64,
        blocked: bool,
        project_id: Option<i64>,
        deadline: Option<String>,
        stats: crate::models::StoryStats,
        created_at: String,
        moved_at: Option<String>,
    ) -> Story {
        Story {
            app_url,
            description,
            archived,
            started,
            story_links,
            entity_type,
            labels,
            mention_ids,
            synced_item: None,
            member_mention_ids,
            story_type,
            custom_fields: None,
            linked_files,
            workflow_id,
            completed_at_override,
            started_at,
            completed_at,
            name,
            global_id,
            completed,
            comments,
            blocker,
            branches,
            epic_id,
            unresolved_blocker_comments: None,
            story_template_id,
            external_links,
            previous_iteration_ids,
            requested_by_id,
            iteration_id,
            tasks,
            label_ids,
            started_at_override,
            group_id,
            workflow_state_id,
            updated_at,
            pull_requests,
            group_mention_ids,
            follower_ids,
            owner_ids,
            external_id,
            id,
            lead_time: None,
            estimate,
            commits,
            files,
            position,
            blocked,
            project_id,
            deadline,
            stats: Box::new(stats),
            cycle_time: None,
            created_at,
            moved_at,
        }
    }
}
